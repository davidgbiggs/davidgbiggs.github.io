{"version":3,"sources":["webpack:///./src/pages/account.tsx"],"names":["AccountPage"],"mappings":"2FAAA,6CAuOeA,UA3Mf,WAmLE,OACE,cAAC,IAAD","file":"component---src-pages-account-tsx-11c5f9eddde03f185f4f.js","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nimport React, { ChangeEvent, FormEvent, useState, useContext, useEffect } from 'react'\n\nimport firebase from 'firebase'\nimport { navigate } from 'gatsby'\nimport { loadStripe } from '@stripe/stripe-js'\nimport styled from '@emotion/styled'\nimport moment from 'moment'\nimport Skeleton from 'react-loading-skeleton'\nimport Page from '../components/Page'\nimport Container from '../components/Container'\nimport Button from '../components/Button'\nimport IndexLayout from '../layouts'\nimport { FirebaseContext, isBrowser } from '../../FirebaseProvider'\n\n// const MembershipBox = styled.div`\n//   // border: 1px solid gray;\n//   // border-radius: 5px;\n//   padding: 15px;\n// `\n\n// const Separator = styled.div`\n//   border-top: 1px solid #cbd2d6;\n//   position: relative;\n//   margin: 10px 0 10px;\n//   text-align: center;\n// `\n\nfunction AccountPage() {\n  // const firebaseContext = useContext(FirebaseContext)\n  // const { uid, subscription } = firebaseContext\n  // const [isLoading, setIsLoading] = useState(false)\n  // const [db, setDb] = useState(null)\n\n  // useEffect(() => {\n  //   if (window) {\n  //     setDb(firebase.firestore())\n  //   }\n  // })\n\n  // useEffect(() => {\n  //   setIsLoading(false)\n  // }, [subscription])\n\n  // if (uid === null) {\n  //   navigate('../login')\n  // }\n\n  // console.log('subscription', subscription)\n  // console.log('uid', uid)\n\n  // const toggleCanceledRef = isBrowser() && firebase.functions().httpsCallable('toggleCanceled')\n  // async function toggleCanceled(subscriptionId: string, cancel_at_period_end: boolean) {\n  //   setIsLoading(true)\n  //   try {\n  //     await toggleCanceledRef({ subscriptionId, cancel_at_period_end })\n  //   } catch (error) {\n  //     console.error(error)\n  //   } finally {\n  //     // window.location.reload()\n  //     // setTimeout(() => {\n  //     //   // window.location.reload()\n  //     //   // setIsLoading(false)\n  //     // }, 3000)\n  //   }\n  // }\n\n  // async function sendToCheckout() {\n  //   setIsLoading(true)\n\n  //   const docRef = await db\n  //     .collection('users')\n  //     .doc(uid)\n  //     .collection('checkout_sessions')\n  //     .add({\n  //       price: 'price_1HbcmfDsZ6um2x2w2Wmeidhd',\n  //       success_url: window.location.origin,\n  //       cancel_url: window.location.origin\n  //     })\n  //   // Wait for the CheckoutSession to get attached by the extension\n  //   docRef.onSnapshot(async snap => {\n  //     const error = snap.data()?.error\n  //     const sessionId = snap.data()?.sessionId\n  //     if (error) {\n  //       // Show an error to your customer and\n  //       // inspect your Cloud Function logs in the Firebase console.\n  //       alert(`An error occured: ${error.message}`)\n  //       setIsLoading(false)\n  //     }\n  //     if (sessionId) {\n  //       // We have a session, let's redirect to Checkout\n  //       // Init Stripe\n  //       const stripe = await loadStripe(\n  //         'pk_test_51HaSmoDsZ6um2x2wqMwFyDsQv5VIrgZeSBn8qvDvgVLG1Uzz6uK78KfBQDxcvx6z7MN3CDvm1RphRNktRifIEgQE00lcVlgV71'\n  //       )\n  //       stripe!.redirectToCheckout({ sessionId })\n  //     }\n  //   })\n  // }\n\n  // interface SubBoxProps {\n  //   currentSubscription: TrusteeSubscription | 'unset'\n  //   // endingDate?: Date | undefined | string\n  // }\n\n  // function SubscriptionBox({ currentSubscription }: SubBoxProps) {\n  //   const bool = 1 + 1 === 2\n\n  //   if (!currentSubscription) {\n  //     return (\n  //       <MembershipBox>\n  //         <div>\n  //           <div className=\"font-weight-bold\">\n  //             <span>Standard Subscription: $13.99/mo.</span>\n  //           </div>\n  //           <div className=\"d-flex justify-content-between align-items-center\">\n  //             <span>No subscription to show</span>\n  //             <Button isLoading={isLoading} type=\"button\" onClick={sendToCheckout}>\n  //               Subscribe Now\n  //             </Button>\n  //           </div>\n  //         </div>\n  //       </MembershipBox>\n  //     )\n  //   }\n  //   if (currentSubscription === 'unset') {\n  //     // if (bool) {\n  //     return (\n  //       <MembershipBox>\n  //         <div>\n  //           <div className=\"font-weight-bold\">\n  //             <span>\n  //               <Skeleton width={250} />\n  //             </span>\n  //           </div>\n  //           <div className=\"d-flex justify-content-between align-items-center\">\n  //             <span>\n  //               <Skeleton width={100} />\n  //             </span>\n  //             <Skeleton width={90} height={34} />\n  //           </div>\n  //         </div>\n  //       </MembershipBox>\n  //     )\n  //   }\n  //   if (currentSubscription.status === 'active') {\n  //     const { stripeLink } = currentSubscription\n  //     const pos = stripeLink.search('sub_')\n  //     const subscriptionId = stripeLink.slice(pos, stripeLink.length)\n  //     console.log('subscription Id: ', subscriptionId)\n  //     if (currentSubscription.cancel_at_period_end) {\n  //       return (\n  //         <MembershipBox>\n  //           <div>\n  //             <div className=\"font-weight-bold\">\n  //               <span>Standard Subscription: $13.99/mo. (set to expire)</span>\n  //             </div>\n  //             <div className=\"d-flex justify-content-between align-items-center\">\n  //               <span>Subscription ending on: {moment(currentSubscription.current_period_end?.toDate()).format('MMM Do, YYYY')}</span>\n  //               <Button\n  //                 isLoading={isLoading}\n  //                 type=\"button\"\n  //                 onClick={() => toggleCanceled(subscriptionId, subscription.cancel_at_period_end)}\n  //               >\n  //                 Resume\n  //               </Button>\n  //             </div>\n  //           </div>\n  //         </MembershipBox>\n  //       )\n  //     }\n  //     return (\n  //       <MembershipBox>\n  //         <div>\n  //           <div className=\"font-weight-bold\">\n  //             <span>Standard Subscription: $13.99/mo.</span>\n  //           </div>\n  //           <div className=\"d-flex justify-content-between align-items-center\">\n  //             <span>Next billing date: {moment(currentSubscription.current_period_end?.toDate()).format('MMM Do, YYYY')}</span>\n  //             <Button isLoading={isLoading} type=\"button\" onClick={() => toggleCanceled(subscriptionId, subscription.cancel_at_period_end)}>\n  //               Cancel\n  //             </Button>\n  //           </div>\n  //         </div>\n  //       </MembershipBox>\n  //     )\n  //   }\n  //   if (currentSubscription.status === 'canceled') {\n  //     return (\n  //       <MembershipBox>\n  //         <div>\n  //           <div className=\"font-weight-bold\">\n  //             <span>Standard Subscription: $13.99/mo. (canceled)</span>\n  //           </div>\n  //           <div className=\"d-flex justify-content-between align-items-center\">\n  //             <span>Canceled On: {moment(currentSubscription.canceled_at?.toDate()).format('MMM Do, YYYY')}</span>\n  //             <button type=\"button\" onClick={sendToCheckout} className=\"btn btn-link\">\n  //               Renew\n  //             </button>\n  //           </div>\n  //         </div>\n  //       </MembershipBox>\n  //     )\n  //   }\n  //   return <span>there was an error</span>\n  // }\n\n  return (\n    <IndexLayout>\n      {/* <Page>\n        <Container>\n          <h6>Membership</h6>\n          <Separator />\n          <SubscriptionBox currentSubscription={subscription} />\n        </Container>\n        <Container>\n          <h6>Legal Review</h6>\n          <Separator />\n          <p className=\"font-weight-bold\">What should go here?</p>\n          <ul>\n            <li>What price?</li>\n            <li>Should I just send an email to aaron@elderlawok.com containing their report?</li>\n            <li>How will you notify that their trustee data is valid? Just an email?</li>\n            <li>Should we list their past Legal Review purchases here?</li>\n          </ul>\n        </Container>\n      </Page> */}\n    </IndexLayout>\n  )\n}\n\nexport default AccountPage\n"],"sourceRoot":""}